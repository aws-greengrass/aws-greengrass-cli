cli.usage.description=Greengrass command line interface%n
cli.root=root directory of GGC
cli.help.usage.header=Displays help information about a command.
cli.health.help.usage.header=Displays help information about a command.
cli.service.help.usage.header=Displays help information about a command.
helpCommand.help=Show usage help for the help command and exit.
helpCommand.command=The COMMAND to display the usage help message for.
path=The path of a configuration key.
exception.missing.command=A command is required.
names=The names of services
# Component
cli.component.usage.description=List, get details, restart and stop components.
cli.component.restart.usage.description=Restart component.
cli.component.stop.usage.description=Stop component.
cli.component.details.usage.description=Get version, status and configuration of a component.
# deployment
cli.deployment.usage.description=Schedule local deployments and check status of scheduled deployments.
cli.deployment.create.merge=The name and version for the target component(s) you want to add or update. Format: \
  <name>=<version>, such as HelloWorld=1.0.0. Can be multiple.
cli.deployment.create.remove=The name of the target component(s) you want to remove. Example: HelloWorld. Can be \
  multiple.
cli.deployment.create.recipeDir=Directory containing recipe files. The file name format is: <Name>-<Version>.yaml, such \
  as HelloWorld-1.0.0.yaml.
cli.deployment.create.artifactDir=Directory containing artifact files. Directory should follow the structure: \
  /<Name>/<Version>/<artifacts>.
cli.deployment.create.param=Runtime parameters. Format: <Component>:<Key>=<Value>. Example: HelloWorld:Port=8080. Can \
  be multiple.
cli.deployment.create.groupId=Group the deployment is targeting
cli.deployment.status.usage.description=Get status of a local deployment using deployment id
cli.deployment.list.usage.description=List the status of local deployments
# Log
cli.logs.usage.description=Log analysis tool
cli.logs.get.usage.description=Aggregate, filter, and visualize logs.
cli.logs.list-log-files.usage.description=List log files from given directories.
cli.logs.list-keywords.usage.description=List suggested keywords for filter.
cli.logs.get.log-dir=Support multiple directories. Not supported for syslog.
cli.logs.get.log-file=Support multiple files.
cli.logs.get.follow=Follow live update. CLI will keeps running and reading from given log inputs. If any time window is \
  provided, it will stop once the current time is after all end times.
cli.logs.get.filter=Filter by keyword, regular expression, or key-value pairs. Format: <keyword>,<regex>,<key=val>. \
  Support adding multiple filters, with AND-relation between multiple filter options and OR-relation within filter option, \
  separated by comma.
cli.logs.get.time-window=Filter log information with provided begin time and end time. Format: <beginTime>,<endTime>. \
  Support input by exact timestamps and relative offsets. Refer to user guide for specific timestamp formats it supports. \
  Support multiple time windows.
cli.logs.get.verbose=Verbose output. Print all fields from log message. Not supported for --syslog.
cli.logs.get.no-color=Remove color coding. Default color coding is bold and red. Support only unix-like terminal \
  since it uses ANSI escape sequence.
cli.logs.get.before=Number of lines shown before any matched log entry. Default is 0.
cli.logs.get.after=Number of lines shown after any matched log entry. Default is 0.
cli.logs.get.syslog=When specified, log tool processes all log files with respect to format of syslog defined by RFC3164, \
  which is "<$Priority>$Timestamp $Host $Logger ($Class): $Message". If no log file is provided, log tool will try to read \
  from /var/log/messages or /var/log/syslog or /var/log/system.log. --log-dir and --verbose options are not supported for syslog.
cli.logs.get.max-log-queue-size=Maximum number of log entries allowed to allocate. Use this option to optimize memory usage. Default is 100.