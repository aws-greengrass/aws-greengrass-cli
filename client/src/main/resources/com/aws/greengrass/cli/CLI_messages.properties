greengrass-cli.usage.description=Greengrass command line interface%n
greengrass-cli.ggcRootPath=The AWS IoT Greengrass V2 root directory.
greengrass-cli.help.usage.header=Show help information for a command.
greengrass-cli.health.help.usage.header=Show help information for a command.
helpCommand.help=Show help information for the help command, and then exit.
helpCommand.command=The command for which to show help information.
exception.missing.command=A command is required.
greengrass-cli.get-debug-password.usage.description=Generate a password for use with the HTTP debug view component.
# Component
greengrass-cli.component.usage.description=Retrieve component information and stop or restart components.
greengrass-cli.component.restart.usage.description=Restart component.
greengrass-cli.component.stop.usage.description=Stop component.
greengrass-cli.component.details.usage.description=Show the version, status, and configuration of a component.
# Deployment
greengrass-cli.deployment.usage.description=Create local deployments and retrieve deployment status.
greengrass-cli.deployment.create.merge=The name and version of the target component you want to add or update.%n\
  Format: <component-name>=<version>. Example: HelloWorld=1.0.0. Use a separate argument for each additional component to specify.
greengrass-cli.deployment.create.remove=The names of the target components you want to remove, separated with commas.%n\
  Example: HelloWorld.
greengrass-cli.deployment.create.recipeDir=The path to the directory that contains your recipe files in JSON or YAML format.%n\
  Example: HelloWorld-1.0.0.yaml.
greengrass-cli.deployment.create.artifactDir=The path to the directory that contains your artifact files.%n\
  The artifact directory must contain the following structure: /<component-name>/<version>/<artifacts>.
greengrass-cli.deployment.create.runWith=The user and/or group used to run the component.%n\
  Format: <component>:posixUser=<user>[:<group>]. Example: HelloWorld:posixUser=ggc_user, HelloWorld:posixUser=ggc_user:ggc_group.%n\
  Use a separate argument for each additional option to specify.
greengrass-cli.deployment.create.groupId=The thing group that the deployment targets.
greengrass-cli.deployment.create.update-config=The configuration update JSON string or JSON file. Use the following JSON format:%n\
  {"MERGE": "componentName": {"<key>": "<value>"}, "RESET": ["<path-to-reset>"]}
greengrass-cli.deployment.status.usage.description=Retrieve the status of a specific local deployment.
greengrass-cli.deployment.list.usage.description=Retrieve the status of local deployments.
# Log
greengrass-cli.logs.usage.description=Analyze Greengrass logs.
greengrass-cli.logs.get.usage.description=Aggregate, filter, and visualize logs.
greengrass-cli.logs.list-log-files.usage.description=List log files from specified directories.
greengrass-cli.logs.list-keywords.usage.description=List suggested keywords to filter logs.
greengrass-cli.logs.get.log-dir=The path to the directory to check for log files.%n\
  Must provide at least one of --log-dir or --log-file.%n\
  Do not use with \u00e2\u0080\u0094syslog. Use a separate argument for each additional directory to specify.
greengrass-cli.logs.get.log-file=The path to a log file.%n\
  Must provide at least one of --log-dir or --log-file.%n\
  Use a separate argument for each additional file to specify.
greengrass-cli.logs.get.follow=Show log updates as they occur. Greengrass CLI continues to run and reads from the specified logs. \
  If you specify time windows, then Greengrass CLI stops monitoring logs after all of the time windows end.
greengrass-cli.logs.get.filter=The keyword, regular expression, or key-value pair to use as a filter.%n\
  Format: <keyword> | <regex> | <key>=<value>. \
  Multiple filters separated by commas within a single argument are combined using OR logic, and multiple arguments are combined using AND logic.%n\
  For example, --filter installed --filter name=alpha,name=beta will filter log messages with the keyword "installed" and where the "name" key has the value "alpha" or "beta".
greengrass-cli.logs.get.time-window=The time window for which to show log information.%n\
  Format: <beginTime>,<endTime>. You can use both exact timestamps and relative offsets. See the AWS IoT Greengrass Developer Guide for supported timestamp formats.%n\
  Use a separate argument for each additional time window to specify.
greengrass-cli.logs.get.verbose=Show all fields from the log messages.%n\
  Do not use with --syslog.
greengrass-cli.logs.get.no-color=Remove output color coding. The default color coding for log messages uses bold red text. \
  Supports only UNIX-like terminals because it uses ANSI escape sequences.
greengrass-cli.logs.get.before=The number of lines to show preceding a matched log entry. Default is 0.
greengrass-cli.logs.get.after=The number of lines to show following a matched log entry. Default is 0.
greengrass-cli.logs.get.syslog=Process all log files using the syslog format defined by RFC3164, which uses the format "<$Priority>$Timestamp $Host $Logger ($Class): $Message". \
  If you do not specify a log file, then Greengrass CLI reads from the following: /var/log/messages, /var/log/syslog, or /var/log/system.log.%n\
  Do not use with --log-dir and --verbose.
greengrass-cli.logs.get.max-log-queue-size=The maximum number of log entries to allocate to memory. Use this option to optimize memory usage. Default is 100.
cli.tpl.files=You need to supply some files
cli.tpl.nft=Cannot find template for
cli.tpl.err=Error
cli.tpl.cnc=Could not copy artifact
cli.tpl.crj=Can't read .jar component
cli.tpl.erd=Error reading
cli.tpl.nbasis=No to indicate basis for template selection
cli.tpl.deploy=Deployment of generated template failed
cli.get-debug-password.usage.description=Call this command to generate a password for use with debug components
